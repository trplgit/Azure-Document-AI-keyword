name: Build Azure-Document-AI-keyword

on:
  workflow_dispatch: # Manual trigger
    inputs:
      environment:
        description: 'Environment to deploy (demo)'
        required: true
        default: 'demo'

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ vars.ACR_NAME }}.azurecr.io
          username: ${{ vars.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build Docker image
        run: docker build --no-cache -f Dockerfile -t ${{ vars.ACR_NAME }}.azurecr.io/${{ inputs.environment }}/Azure-Document-AI-keyword:v1 .
        working-directory: ./  # Add this if Dockerfile is in the root directory

      - name: Push Docker image
        run: |
          docker push ${{ vars.ACR_NAME }}.azurecr.io/${{ inputs.environment }}/trpl-ai-large-lang-model:v1

  deploy:
    name: Deploy to Linux VM (Demo)
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Install OpenVPN
        run: sudo apt-get install -y openvpn

      - name: Prepare VPN Files
        run: |
          echo "${{ secrets.VPN_PKCS12_FILE }}" | base64 -d > TRPL-FW-TCP-1194-ci-cd-automation.p12
          echo "${{ secrets.VPN_TLS_KEY_FILE }}" | base64 -d > TRPL-FW-TCP-1194-ci-cd-automation-tls.key

      - name: Connect to VPN
        run: |
          echo "${{ secrets.VPN_CONFIG_FILE }}" > vpn-config.ovpn
          echo -e "${{ vars.VPN_USERNAME }}\n${{ secrets.VPN_PASSWORD }}" > vpn-credentials.txt
          sudo openvpn --config vpn-config.ovpn --auth-user-pass vpn-credentials.txt --daemon

      - name: Wait for VPN Connection
        run: sleep 15

      - name: Verify VPN Connection
        run: |
          ifconfig | grep tun || (echo "VPN connection failed" && exit 1)

      - name: Deploy Docker container to VM (Demo)
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ vars.LINUX_VM_HOST_DEMO }}  # Changed to demo VM host variable
          username: ${{ vars.LINUX_VM_USERNAME_DEMO }}  # Changed to demo VM username
          password: ${{ secrets.LINUX_VM_PASSWORD_DEMO }}  # Changed to demo VM password secret
          port: 22
          script: |
            # Log into Docker registry
            echo "${{ secrets.LINUX_VM_PASSWORD_DEMO }}" | sudo -S docker login ${{ vars.ACR_NAME }}.azurecr.io -u ${{ vars.ACR_USERNAME }} -p ${{ secrets.ACR_PASSWORD }}
            
            # Pull the image
            echo "${{ secrets.LINUX_VM_PASSWORD_DEMO }}" | sudo -S docker pull ${{ vars.ACR_NAME }}.azurecr.io/${{ inputs.environment }}/Azure-Document-AI-keyword:v1
            
            # Stop and remove any running container with the same name
            echo "${{ secrets.LINUX_VM_PASSWORD_DEMO }}" | sudo -S docker stop VM05-Prod-Trpl-secai-demo || true
            echo "${{ secrets.LINUX_VM_PASSWORD_DEMO }}" | sudo -S docker rm VM05-Prod-Trpl-secai-demo || true
            
            # Run the new container with resource limits (1 CPU, 2GB memory)
            echo "${{ secrets.LINUX_VM_PASSWORD_DEMO }}" | sudo -S docker run -e ASPNETCORE_ENVIRONMENT=Demo -d --restart always --network=mssqlnetwork -p 8881:80 --name VM05-Prod-Trpl-secai-demo --memory="2G" --cpus="1.0" ${{ vars.ACR_NAME }}.azurecr.io/${{ inputs.environment }}/Azure-Document-AI-keyword:v1

      - name: Cleanup VPN Credentials
        run: |
          rm -f vpn-config.ovpn vpn-credentials.txt
